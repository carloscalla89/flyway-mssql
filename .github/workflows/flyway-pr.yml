name: Flyway PR Check

on:
  pull_request:
    branches: [ "main", "develop", "release/**", "feature/**" ]

permissions:
  contents: read

concurrency:
  group: flyway-pr-${{ github.ref }}
  cancel-in-progress: true


jobs:
  validate:
    name: Validate Flyway on PR (SQL Server ephemeral)
    runs-on: ubuntu-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        container_name: mssql-local
        ports:
          - "127.0.0.1:11433:1433"
        environment:
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Developer"
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
        volumes:
          - mssql_data:/var/opt/mssql
        restart: unless-stopped
        healthcheck:
          test: ['CMD-SHELL','grep -q "SQL Server is now ready for client connections" /var/opt/mssql/log/errorlog']
          interval: 10s
          timeout: 5s
          retries: 30
          start_period: 20s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug secret
        run: |
          echo "Valor del secret MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}"

      - name: Wait for SQL to be healthy
        run: |
          for i in {1..60}; do
            docker run --rm --network host mcr.microsoft.com/mssql-tools /opt/mssql-tools/bin/sqlcmd -S 127.0.0.1,14333 -U sa -P "${{ secrets.MSSQL_SA_PASSWORD }}" -Q "SELECT 1" && break
            echo "Waiting MSSQL... ($i/60)"; sleep 2
          done

      - name: Create empty DB for CI
        run: |
          docker run --rm --network host mcr.microsoft.com/mssql-tools /opt/mssql-tools/bin/sqlcmd \
            -S 127.0.0.1,14333 -U sa -P "${{ secrets.MSSQL_SA_PASSWORD }}" \
            -Q "IF DB_ID('FlywayPR') IS NULL CREATE DATABASE FlywayPR;"

      - name: Run Flyway validate + dry-run + migrate (ephemeral)
        run: |
          docker run --rm -v "$PWD":/flyway -w /flyway \
            flyway/flyway:10-alpine \
            -url="jdbc:sqlserver://127.0.0.1:14333;databaseName=FlywayPR;encrypt=false" \
            -user="sa" \
            -password="${{ secrets.MSSQL_SA_PASSWORD }}" \
            -locations="filesystem:./sql" \
            validate

          # Opcional: genera SQL de dry-run (no ejecuta contra la BD)
          docker run --rm -v "$PWD":/flyway -w /flyway \
            flyway/flyway:10-alpine \
            -url="jdbc:sqlserver://127.0.0.1:14333;databaseName=FlywayPR;encrypt=false" \
            -user="sa" \
            -password="${{ secrets.MSSQL_SA_PASSWORD }}" \
            -locations="filesystem:./sql" \
            -dryRunOutput="build/flyway_dryrun.sql" migrate

          # Ejecuta migración real en la BD efímera para “probarla”
          docker run --rm -v "$PWD":/flyway -w /flyway \
            flyway/flyway:10-alpine \
            -url="jdbc:sqlserver://127.0.0.1:14333;databaseName=FlywayPR;encrypt=false" \
            -user="sa" \
            -password="${{ secrets.MSSQL_SA_PASSWORD }}" \
            -locations="filesystem:./sql" \
            migrate

      - name: Upload dry-run SQL (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flyway-dryrun
          path: build/flyway_dryrun.sql
